<?xml version="1.0" encoding="UTF-8"?>
<project default="end">
	
	<!--定义属性-->
	<property name="src.dir" location="src"></property>
	<property name="build.dir" location="build"></property>
	<property name="lib.dir" location="${basedir}/libs"></property>
	<property name="build.classes" location="${build.dir}/classes"></property>
	<property name="build.dist" location="${build.dir}/dist"></property>
	<property name="build.src" location="${build.dir}/src"></property>
	<property name="report.dir" location="${basedir}/test-report"></property>	
	<property name="output.dir" location="${basedir}/test-output"></property>
	
	<!--指明美化测试报告所需工具jar包的路径-->
	<path id="master-classpath">
		
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
		
	</path>
	

	<!--指明单个测试用例的路径-->
	<property name="run.test.class" value="abc.TestActions"></property>
	
	<!--指明批量测试多个测试用例的路径-->
	<property name="run.alltest.class" value="**/Test*.class"></property>
	
	
	<!--指明编译文件所需jar包的路径-->
	<path id="compile-path">
		<fileset dir="${lib.dir}" includes="*.jar"></fileset>
	</path>
	
	
	<!--指明编译文件所需jar包和编译好了后的class文件的路径-->
	<path id="compile-test-path">
		<path refid="compile-path"></path>
		<pathelement location="${build.classes}"/>
	</path>
	
	
	<!--指明运行测试用例所需环境（包括需要调用的文件）的所有文件的路径-->
	<path id="run-test-path">
		
		<path refid="compile-path"></path>
		<pathelement location="${build.classes}"/>
	
	</path>
	
	
	<!--fileset可以设定一组文件集来进行操作，dir指明文件集要进行选择的路径；
	通过id可以指定这个文件的名称，在使用的时候进行直接的引入；
	include和exclude可以设定包含范围和排除范围；
	**/*。*指定包含所有文件夹中的所有文件-->
	<fileset id="src.path" dir="src">
		<include name="**/*.*"/>
		<!--exclude name="**/Test*"/-->
	</fileset>

	
	<!--定义testng类型-->
	<taskdef name="testng" classname="org.testng.TestNGAntTask" classpathref="run-test-path" />
	
	
	<!--进行项目的清理工作-->
	<target name="clean">
		<echo>进行项目的清理工作! :)</echo>
		<delete dir="${build.dir}"></delete>
	</target>
	
	<!--进行项目的初始化-->
	<target name="init" depends="clean">
		<echo>创建测试所需目录! :)</echo>
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.dir}/src"/>
		<mkdir dir="${build.dir}/classes"/>
		<mkdir dir="${build.dir}/dist"/>
		<mkdir dir="${basedir}/test-report"/>
	</target>
	
	
	<!--复制目录-->
	<target name="copySrc" depends="init">
		
		<echo>复制目录! :)</echo>
		
		<!--复制fileset集中的所有文件到build目录下的src目录中-->
		<copy todir="${build.dir}/src">
			<fileset refid="src.path"></fileset>
		</copy>
		
	</target>
	
	
	<!--编译源文件-->
	<target name="compile" depends="copySrc">
		
		<echo>编译源文件! :)</echo>
		
		<!--failonerror为true代表编译错误时停止执行;includeantruntime代表忽略警告信息-->
		<javac failonerror="true" includeantruntime="true" destdir="${build.dir}/classes" srcdir="${build.dir}/src" classpathref="compile-path">
			<compilerarg    line="-encoding GBK "/>
		</javac>
		
	</target>
	
	
	<!--打jar包-->
	<target name="jar" depends="compile">
		
		<echo>打包成Selenium.jar! :)</echo>
		
		<!--将build目录下的classes目录中的文件打成jar包-->
		<jar destfile="${build.dist}/selenium.jar" basedir="${build.classes}">
			
			<!--使用manifest方法往jar包中插入内容-->
			<manifest>
				<attribute name="Main-Class" value="SelfStudySelenium"/>
				<attribute name="Build-By" value="Sunjian"/>
			</manifest>
			
		</jar>
		
	</target>
		
	<!--使用testng框架运行testn.xml文件中的测试用例-->
    <target name="run-test" depends="jar">
    	
    	<echo>使用testng运行测试用例! :)</echo>
    	     	
        	<testng classpathref="run-test-path">
        		<xmlfileset dir="${basedir}" includes="testng.xml"/>
    		</testng>
        	
    </target>
	
	 <!--使用saxon工具美化testng测试报告，并输出到output-report文件夹中-->   
    <target name="beautify-testReport" depends="run-test">
	
		<xslt in="${output.dir}/testng-results.xml" style="${output.dir}/testng-results.xsl" out="${report.dir}/index.html" classpathref="master-classpath" processor="SaxonLiaison">
			<param name="testNgXslt.outputDir" expression="${report.dir}"/>
			<param name="testNgXslt.sortTestCaseLinks" expression="true"/>
			<param name="testNgXslt.testDetailsFilter" expression="FAIL,SKIP,PASS"/>
		</xslt>
		
    	<echo>美化后的测试报告已经帮您保存到test-report目录中了! :)</echo>
    	
	</target>
	    
	<!--最后一个任务：输出测试结束语-->
	<target name="end" depends="beautify-testReport">
		<echo>The whole test process is over, you are very good! :)</echo>
	</target>
	
</project>